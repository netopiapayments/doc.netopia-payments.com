"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[5401],{6748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"payment-sdks/php","title":"PHP SDK","description":"NETOPIA Payments Composer","source":"@site/docs/payment-sdks/php.md","sourceDirName":"payment-sdks","slug":"/payment-sdks/php","permalink":"/docs/payment-sdks/php","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"PHP SDK"},"sidebar":"docsSidebar","previous":{"title":"Payment SDKs","permalink":"/docs/payment-sdks"},"next":{"title":"NodeJS SDK","permalink":"/docs/payment-sdks/nodejs"}}');var i=t(4848),r=t(8453);const a={sidebar_position:1,title:"PHP SDK"},o="Composer PHP",p={},l=[{value:"NETOPIA Payments Composer",id:"netopia-payments-composer",level:2},{value:"Installation",id:"installation",level:3},{value:"or",id:"or",level:4},{value:"Example",id:"example",level:3},{value:"An example of Payment Request in Laravel",id:"an-example-of-payment-request-in-laravel",level:5},{value:"An example of IPN in Laravel",id:"an-example-of-ipn-in-laravel",level:4},{value:"Note / Suggestions",id:"note--suggestions",level:5}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"composer-php",children:"Composer PHP"})}),"\n",(0,i.jsx)(n.h2,{id:"netopia-payments-composer",children:"NETOPIA Payments Composer"}),"\n",(0,i.jsxs)(n.p,{children:["PHP Module: ",(0,i.jsx)(n.a,{href:"https://github.com/mobilpay/PHP_CARD",children:"https://github.com/mobilpay/PHP_CARD"}),"\nComposer: ",(0,i.jsx)(n.a,{href:"https://github.com/mobilpay/composer",children:"https://github.com/mobilpay/composer"})]}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"Run the following command from root of your project"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"composer require netopia/payment"})}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"or",children:"or"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["add the ",(0,i.jsx)(n.strong,{children:'"netopia/payment"'})," to your ",(0,i.jsx)(n.strong,{children:"composer.json"})," file like the following example"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n    "require": {\n        ...\n        "netopia/payment": "^1.1",\n        ...\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"and then run the following command from your Terminal"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"composer install"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.h5,{id:"an-example-of-payment-request-in-laravel",children:"An example of Payment Request in Laravel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'    ...\n    \n    use Netopia\\Payment\\Address;\n    use Netopia\\Payment\\Invoice;\n    use Netopia\\Payment\\Split;\n    use Netopia\\Payment\\Request\\Card;\n    \n    ...\n    \n    class ExampleController extends Controller\n    {\n        /**\n         * all payment requests will be sent to the NETOPIA Payments server\n         * SANDBOX : http://sandboxsecure.mobilpay.ro\n         * LIVE : https://secure.mobilpay.ro\n         */\n        public $paymentUrl;\n        /**\n         * NETOPIA Payments is working only with Certificate. Each NETOPIA partner (merchant) has a certificate.\n         * From your Admin panel you can download the Certificate.\n         * is located in Admin -> Conturi de comerciant -> Detalii -> Setari securitate\n         * the var $x509FilePath is path of your certificate in your platform\n         * i.e: /home/certificates/public.cer\n         */\n        public $x509FilePath;\n        /**\n         * Billing Address\n         */\n        public $billingAddress;\n        /**\n         * Shipping Address\n         */\n        public $shippingAddress;\n        \n        ...\n        \n        public function index()\n        {\n            $this->paymentUrl   = \'http://sandboxsecure.mobilpay.ro\';\n            $this->x509FilePath = \'/home/certificates/sandbox.XXXX-XXXX-XXXX-XXXX-XXXX.public.cer\';\n            try {\n                $paymentRequest = new Card();\n                $paymentRequest->signature  = \'XXXX-XXXX-XXXX-XXXX-XXXX\';//signature - generated by mobilpay.ro for every merchant account\n                $paymentRequest->orderId    = md5(uniqid(rand())); // order_id should be unique for a merchant account\n                $paymentRequest->confirmUrl = \'https://example.test/card/success\'; // is where mobilPay redirects the client once the payment process is finished and is MANDATORY\n                $paymentRequest->returnUrl  = \'https://example.test/ipn\';// is where mobilPay will send the payment result and is MANDATORY\n    \n                /*\n                 * Invoices info\n                 */\n                $paymentRequest->invoice = new Invoice();\n                $paymentRequest->invoice->currency  = \'RON\';\n                $paymentRequest->invoice->amount    = \'20.00\';\n                $paymentRequest->invoice->tokenId   = null;\n                $paymentRequest->invoice->details   = "Payment Via Composer library";\n    \n                /*\n                 * Billing Info\n                 */\n                $this->billingAddress = new Address();\n                $this->billingAddress->type         = "person"; //should be "person" / "company"\n                $this->billingAddress->firstName    = "Billing name";\n                $this->billingAddress->lastName     = "Billing LastName";\n                $this->billingAddress->address      = "Bulevardul Ion Creang\u0103, Nr 00";\n                $this->billingAddress->email        = "test@billing.com";\n                $this->billingAddress->mobilePhone  = "0732123456";\n                $paymentRequest->invoice->setBillingAddress($this->billingAddress);\n    \n                /*\n                 * Shipping\n                 */\n                $this->shippingAddress = new Address();\n                $this->shippingAddress->type        = "person"; //should be "person" / "company"\n                $this->shippingAddress->firstName   = "Shipping Name";\n                $this->shippingAddress->lastName    = "Shipping LastName";\n                $this->shippingAddress->address     = "Bulevardul Mihai Eminescu, Nr 00";\n                $this->shippingAddress->email       = "test@shipping.com";\n                $this->shippingAddress->mobilePhone = "0721234567";\n                $paymentRequest->invoice->setShippingAddress($this->shippingAddress);\n    \n                /**\n                * params \n                * The params is optional\n                */\n                $paymentRequest->params = [\n                    \'framework_name\'=>"Laravel",\n                    \'framework_version\'=>"9"\n                ];\n\n                /**\n                * Split payment\n                * this option is ONLY for merchants, who already have split payment settings.\n                * \'id\' Is the SELLERA_CCOUNT_ID\n                * \'amount\' is the splited amount \n                */\n                $paymentRequest->split = new Split();\n                $paymentRequest->split->destinations = [\n                    [\n                    \'id\'=>\'123456\',\n                    \'amount\'=>"2.75"\n                    ]\n                ];\n\n                /*\n                 * encrypting\n                 */\n                $paymentRequest->encrypt($this->x509FilePath);\n    \n                /**\n                 * send the following data to NETOPIA Payments server\n                 * Method : POST\n                 * Parameters : env_key, data, cipher, iv\n                 * URL : $paymentUrl\n                 */\n                $env_key = $paymentRequest->getEnvKey();\n                $data   = $paymentRequest->getEncData();\n                $cipher = $paymentRequest->getCipher();\n                $iv     = $paymentRequest->getIv();\n            }catch (\\Exception $e)\n            {\n                return "Oops, There is a problem!";\n            }\n        }\n        ...\n    }    \n    \n'})}),"\n",(0,i.jsx)(n.h4,{id:"an-example-of-ipn-in-laravel",children:"An example of IPN in Laravel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    \n    ...\n    \n    use Netopia\\Payment\\Address;\n    use Netopia\\Payment\\Invoice;\n    use Netopia\\Payment\\Request\\Card;\n    use Netopia\\Payment\\Request\\Notify;\n    use Netopia\\Payment\\Request\\PaymentAbstract;\n    \n    ...\n    \n    class IpnsController extends Controller \n    {\n    \n        ...\n    \n        public $errorCode;\n        public $errorType;\n        public $errorMessage;\n        public $paymentUrl;\n        public $x509FilePath;\n        public $cipher;\n        public $iv;\n    \n        ...\n        \n        public function index()\n        {\n        ...\n        \n            $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_NONE;\n            $this->errorCode = 0;\n            $this->errorMessage = '';\n            $this->cipher     = 'rc4';\n            $this->iv         = null;\n\n            ....\n\n            if(array_key_exists('cipher', $_POST))\n            {\n                $this->cipher = $_POST['cipher'];\n                if(array_key_exists('iv', $_POST))\n                {\n                    $this->iv = $_POST['iv'];\n                }\n            }\n    \n            $this->paymentUrl = 'http://sandboxsecure.mobilpay.ro';\n            $this->x509FilePath = '/home/certificates/sandbox.XXXX-XXXX-XXXX-XXXX-XXXXprivate.key';\n    \n    \n            if (strcasecmp($_SERVER['REQUEST_METHOD'], 'post') == 0){\n                if(isset($_POST['env_key']) && isset($_POST['data'])){\n                    try {\n                        $paymentRequestIpn = PaymentAbstract::factoryFromEncrypted($_POST['env_key'], $_POST['data'], $this->x509FilePath, null, $this->cipher, $this->iv);\n                        $rrn = $paymentRequestIpn->objPmNotify->rrn;\n                        if ($paymentRequestIpn->objPmNotify->errorCode == 0) {\n                            switch($paymentRequestIpn->objPmNotify->action){\n                                case 'confirmed':\n                                    //update DB, SET status = \"confirmed/captured\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                case 'confirmed_pending':\n                                    //update DB, SET status = \"pending\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                case 'paid_pending':\n                                    //update DB, SET status = \"pending\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                case 'paid':\n                                    //update DB, SET status = \"open/preauthorized\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                case 'canceled':\n                                    //update DB, SET status = \"canceled\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                case 'credit':\n                                    //update DB, SET status = \"refunded\"\n                                    $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                                    break;\n                                default:\n                                    $errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;\n                                    $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_ACTION;\n                                    $this->errorMessage = 'mobilpay_refference_action paramaters is invalid';\n                            }\n                        }else{\n                            //update DB, SET status = \"rejected\"\n                            $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;\n                        }\n                    }catch (\\Exception $e) {\n                        $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_TEMPORARY;\n                        $this->errorCode = $e->getCode();\n                        $this->errorMessage = $e->getMessage();\n                    }\n    \n                }else{\n                    $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;\n                    $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_PARAMETERS;\n                    $this->errorMessag = 'mobilpay.ro posted invalid parameters';\n                }\n    \n            } else {\n                $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;\n                $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_METHOD;\n                $this->errorMessage = 'invalid request metod for payment confirmation';\n            }\n    \n            /**\n             * Communicate with NETOPIA Payments server\n             */\n    \n            header('Content-type: application/xml');\n            echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\";\n            if($this->errorCode == 0)\n            {\n                echo \"<crc>{$this->errorMessage}</crc>\";\n            }\n            else\n            {\n                echo \"<crc error_type=\\\"{$this->errorType}\\\" error_code=\\\"{$this->errorCode}\\\">{$this->errorMessage}</crc>\";\n            }\n    \n        }\n    }\n"})}),"\n",(0,i.jsx)(n.h5,{id:"note--suggestions",children:"Note / Suggestions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"if there is issue with namespace in your platform , you can solve it by getting help from Service Providers.\nfor ex. in Laravel you can define a provider and put in your vendor and then set your namespace from the composer.json"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"if in any case the Country , City , Zip code , ... is separated from the Address in your application , please merge it with Address and create full address for Billing/Shipping address."}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);